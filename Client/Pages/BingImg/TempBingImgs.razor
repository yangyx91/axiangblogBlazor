@page "/tempbingimgs"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Graph
@inject HttpClient http
@*@attribute [Authorize]*@
@inject GraphServiceClient GraphClient

<h3>Imgs</h3>
<div class="input-group mb-3">
    <div class="input-group-append">
        <button class="btn btn-primary" @onclick="GetImgs">获取图片</button>
    </div>
</div>

<div class="col-sm-8">

@if (user != null)
{
    @if (imageDocuments.Count > 0)
    {
    @foreach (var img in imageDocuments)
    {
    <div class="card">
        <div class="card-header">@img.imgId</div>
        <div class="card-body">
            <img class="rounded m-1" src="@img.Url" />
            <h5 class="card-title">@img.Title</h5>
            <p class="card-text"><a href="@img.Url" class="card-link" target="_blank">@img.Url</a></p>
            <footer class="blockquote-footer">@img.CreateDate</footer>
            @if (user.Mail == "yang@axiangblog.com")
            {
                <div class="card-body">
                    <button class="btn btn-primary" @onclick="(() => DelImg(img.imgId) )">删除图片</button>
                    <button class="btn btn-primary" @onclick="(() => SaveImg(img) )">保存主库</button>
                </div>
            }
        </div>
    </div>}}
    }
</div>
   



@code { 
    
        private string imageName;

        private long upYunBucketUsage = 0;

        private IList<BingImgDocument> imageDocuments = new List<BingImgDocument>();

        private User user;

        protected async override Task OnInitializedAsync()
        {
            var request = GraphClient.Me.Request();
            user = await request.GetAsync();
        }

        private async Task GetImgs()
        {
            var apiRes = await http.PostAsJsonAsync<QueryBingImgParams>("https://openapi.axiangblog.com/getBingImgs/v1/", new QueryBingImgParams()
            {
                page = 1,
                pageSize = 50
            });
            var res = await apiRes.Content.ReadAsStringAsync();

            if (!string.IsNullOrEmpty(res))
            {
                try
                {
                    var imgResult = System.Text.Json.JsonSerializer.Deserialize<BingImg_Response>(res);

                    if (imgResult != null && imgResult.data != null && imgResult.data.Count() > 0)
                    {
                        var allImgs = imgResult.data;
                        foreach (var item in allImgs)
                        {
                            imageDocuments.Add(item);
                        }
                    }
                }
                catch (Exception ex)
                {

                    throw;
                }

            }
        }

        private async Task DelImg(string imgId)
        {
            var apiRes = await http.PostAsJsonAsync<DelBingImg_Request>("https://openapi.axiangblog.com/delBingImgs/v1/", new DelBingImg_Request()
            {
                imgId = imgId
            });

            var res = await apiRes.Content.ReadAsStringAsync();
        }


        private async Task SaveImg(BingImgDocument img)
        {
            //判断主库是否存在
            var apiRes = await http.PostAsJsonAsync<CountOneBingImg_Request>("api/countOneBingImg", new CountOneBingImg_Request()
            {
                imgId =img.imgId
            });

            var res = await apiRes.Content.ReadAsStringAsync();

            if (!string.IsNullOrEmpty(res)&& Convert.ToInt64(res)==0)
            {
                await http.PostAsJsonAsync<SaveOneBingImg_Request>("api/saveBingImg", new SaveOneBingImg_Request()
                {
                    imgId = img.imgId,
                    CreateDate = img.CreateDate,
                    Creator = img.Creator,
                    Domain = img.UrlBase,
                    Url = img.Url,
                    UrlBase = img.UrlBase,
                    Title=img.Title
                });
            }
        }
}
