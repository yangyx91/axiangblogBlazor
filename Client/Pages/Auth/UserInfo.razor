@page "/user"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Graph
@attribute [Authorize]
@inject GraphServiceClient GraphClient
@inject HttpClient http

<title>[Graph]用户信息</title>
<h3>[Graph]用户信息</h3>

@if (user != null)
{
    <p>Id: @user.Id</p>
    <p>UserPrincipalName: @user.UserPrincipalName</p>
    <p>DisplayName: @user.DisplayName</p>
    <p>Mail: @user.Mail</p>
    <p><button class="btn btn-primary" @onclick="WelcomeMail">Send Welcome Mail</button></p>
    <p><button class="btn btn-primary" @onclick="GetMyMail">Get My Mails</button></p>
    @if(user.UserPrincipalName=="yang@axiangblog.cn" || user.UserPrincipalName == "yang.yx91@live.cn") {
         <p><button class="btn btn-primary" @onclick="GetAllUsers">Get Users</button></p>
          <p><button class="btn btn-primary" @onclick="GetAllQueuePosts">Get QueuePosts</button></p>
    }
    
}


@if (messages.Count>0)
{
<table class="table table-bordered">
    <thead>
        <tr>
            <th scope="col">Name</th>
            <th scope="col">Address</th>
            <th scope="col">Subject</th>
            <th scope="col">BodyPreview</th>
            <th scope="col">ReceivedDate</th>
            <th scope="col">HasAttachment</th>
            <th scope="col">Read</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var msg in messages)
        {
            <tr>
                <td>@msg.From.EmailAddress.Name</td>
                <td>@msg.From.EmailAddress.Address</td>
                <td>@msg.Subject</td>
                <td>@msg.BodyPreview</td>
                <td>@msg.ReceivedDateTime.Value.ToString("yyyy-MM-dd HH:mm:ss")</td>
                <td>@msg.HasAttachments.Value</td>
                <td><a href="@msg.WebLink" target="_blank">Read</a></td>
            </tr>}
    </tbody>
</table>	 
}

@if (users.Count>0)
{
<table class="table table-bordered">
    <thead>
        <tr>
            <th scope="col">UserID</th>
            <th scope="col">DisplayName</th>
            <th scope="col">Email</th>
            <th scope="col">UserPrincipalName</th>
            <th scope="col">CreateTime</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var uitem in users)
        {
            <tr>
                <td>@uitem.userID</td>
                <td>@uitem.displayName</td>
                <td>@uitem.email</td>
                <td>@uitem.userPrincipalName</td>
                <td>@uitem.createTime.ToString("yyyy-MM-dd HH:mm:ss")</td>
            </tr>}
    </tbody>
</table>	 
}

@if (queuePosts.Count>0)
{
<table class="table table-bordered">
    <thead>
        <tr>
            <th scope="col">PostId</th>
            <th scope="col">PostDate</th>
            <th scope="col">PostTitle</th>
            <th scope="col">PostContent</th>
            <th scope="col">PostCategoryName</th>
            <th scope="col">PostAuthor</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var qitem in queuePosts)
        {
            <tr>
                <td>@qitem.post_Id</td>
                <td>@qitem.post_Date.ToString("yyyy-MM-dd HH:mm")</td>
                <td>@qitem.post_Title</td>
                <td>@qitem.post_Content</td>
                <td>@qitem.post_CategoryName</td>
                <td>@qitem.post_Author</td>
            </tr>}
    </tbody>
</table>	 
}

@code {
    private User user;

    private IList<Microsoft.Graph.Message> messages = new List<Microsoft.Graph.Message>();

    private IList<UserInfoDocument> users = new List<UserInfoDocument>();

    private IList<QueuePostDocument> queuePosts = new List<QueuePostDocument>();

    protected async override Task OnInitializedAsync()
    {
        var request = GraphClient.Me.Request();
        user = await request.GetAsync();
    }

    private async Task WelcomeMail()
    {
        var message = new Microsoft.Graph.Message
        {
            Subject = "用户登录站点提醒",
            Body = new ItemBody
            {
                ContentType = BodyType.Text,
                Content = string.Format("当前用户名:{0},登陆时间：{1}",user.UserPrincipalName,DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"))
            },
            ToRecipients = new List<Recipient>()
                {
                    new Recipient
                    {
                        EmailAddress = new EmailAddress
                        {
                            Address = "yang@axiangblog.cn"
                        }
                    }
                }
        };

        var request = GraphClient.Me.SendMail(message,false).Request();
        await request.PostAsync();
    }

    private async Task GetMyMail()
    {
        users = new List<UserInfoDocument>();
        queuePosts = new List<QueuePostDocument>();
        var res = await GraphClient.Me.Messages
        .Request()
        .GetAsync();

        if (res.Count>=0)
        {
            messages = res.CurrentPage;
        }
    }

    private async Task GetAllUsers()
    {
         messages=new List<Microsoft.Graph.Message>();
         queuePosts = new List<QueuePostDocument>();
        var userResult = await http.GetFromJsonAsync<List<UserInfoDocument>>("api/getusers");
        if (userResult.Count>=0)
        {
            users = userResult;
        }
    }

     private async Task GetAllQueuePosts()
    {
         users = new List<UserInfoDocument>();
         messages=new List<Microsoft.Graph.Message>();
        var queuePostResult = await http.GetFromJsonAsync<List<QueuePostDocument>>("api/getqueuepost");
        if (queuePostResult.Count>=0)
        {
            queuePosts = queuePostResult;
        }

    }
}