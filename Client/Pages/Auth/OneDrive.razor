@page "/onedrive"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Graph
@attribute [Authorize]
@inject GraphServiceClient GraphClient


<h3>OneDrive</h3>

@if (user != null)
{
<button class="btn btn-primary" @onclick="GetFiles">Get Files</button>
}

@if (driveItems.Count > 0)
{
    <div class="form-group row">
        <label class="col-sm-10 col-form-label">当前目录：@currentFolder</label>
    </div>
    <div class="form-group row">
        <label class="col-sm-2 col-form-label">创建新目录：</label>
        <div class="col-sm-6">
            <input type="text" class="form-control" @bind-value="newFolderName"/>
        </div>
        <button class="btn btn-primary" @onclick="(() => CreateFolder(parentId) )">Create</button>
    </div>

    <div class="form-group row">
        <label class="col-sm-2 col-form-label">上传图片(4M以下)：</label>
        <div class="col-sm-6">
            <InputFile OnChange="@OnInputFileChange" multiple />
        </div>
        <label class="col-sm-2 col-form-label">进度:@uploadProcess</label>
    </div>
    <div class="form-group row">
        <label class="col-sm-10 col-form-label">当前选中文件：@selectFileName</label>
    </div>
    <div class="form-group row">
        <label class="col-sm-2 col-form-label">下载直链URL：</label>
            <div class="col-sm-8">
                <textarea class="form-control" rows="5">@selectDownloadUrl</textarea>
            </div>
    </div>
    <table class="table table-bordered">
        <thead>
            <tr>
                <th scope="col">Name</th>
                <th scope="col">Folder</th>
                <th scope="col">User</th>
                <th scope="col">Size</th>
                <th scope="col">Link</th>
                <th scope="col">Download URL</th>
            </tr>
        </thead>
        <tbody>
        @foreach (var item in driveItems) 
        { 
            <tr>
                @*<td>@item.Id</td>*@
                <td>@item.Name</td>
                @if (item.Folder != null && item.Folder.ChildCount >= 0)
                {
                    <td>Folder</td> 
                }
                else
                {
                    <td>@item.File.MimeType</td>
                }
                <td>@item.Size</td>
                <td>@item.CreatedDateTime.Value.ToString("yyyy-MM-dd HH:mm:ss")</td>
                <td><a href="@item.WebUrl">Link</a></td>
                <td>
                    @if (item.Folder == null)
                    {
                        <button class="btn btn-primary" @onclick="(() => GetDownloadUrl(item.Id,item.Name) )">Get</button>
                    }
                    @if (item.Folder != null&& item.Folder.ChildCount>=0)
                    {
                <button class="btn btn-primary" @onclick="(() => GetChildren(item.Id,item.Name) )">GetChildren</button>}
                    @if (isBack)
                    {
                        <button class="btn btn-primary" @onclick="(() => BackParentFolder(item.ParentReference.Id) )">Back</button>
                    }
                </td>
            </tr>
         }
    </tbody>
</table>}

@code {

            private User user;

            private bool isBack = false;

            private string selectFileName="无";

            private string selectDownloadUrl="无";

            private string currentFolder = "无";

            private string newFolderName = "";

            private string parentId = "";

            private string uploadProcess = "";

            private IList<DriveItem> driveItems = new List<DriveItem>();

            protected async override Task OnInitializedAsync()
            {
                var request = GraphClient.Me.Request();
                user = await request.GetAsync();
            }

            private async Task GetFiles()
            {
                var request = GraphClient.Me.Drive.Root.Children.Request();
                driveItems = await request.GetAsync();
            }

            private async Task GetDownloadUrl(string id,string name)
            {
                selectFileName = name;
                var driveItem = await GraphClient.Me.Drive.Items[id].Request().GetAsync();

                if (driveItem != null)
                {
                    selectDownloadUrl = (string)driveItem.AdditionalData["@microsoft.graph.downloadUrl"];

                    var message = new Microsoft.Graph.Message
                    {
                        Subject = "系统邮件：当前选中文件：" + selectFileName,
                        Body = new ItemBody
                        {
                            ContentType = BodyType.Text,
                            Content = @"您好，你的下载直链URL已创建，请尽快下载：" +selectDownloadUrl
                        },
                        ToRecipients = new List<Recipient>()
                        {
                            new Recipient
                            {
                                EmailAddress = new EmailAddress
                                {
                                    Address = "yang.yx@email.cn"
                                }
                            }
                        }
                    };

            var request = GraphClient.Me.SendMail(message, false).Request();
            await request.PostAsync();
        }
    }

    private async Task GetChildren(string id,string folderName)
    {
        currentFolder = folderName;
        parentId = id;
        var request = GraphClient.Me.Drive.Items[id].Children.Request();
        var items = await request.GetAsync();
        if (items.Count()>0)
        {
            driveItems = items;
            isBack = true;
        }
        else
        {
            driveItems=new List<DriveItem>();
        }
    }

    private async Task BackParentFolder(string id)
    {
        var request = GraphClient.Me.Drive.Items[id].Request();
        var item = await request.GetAsync();
        if (item!=null )
        {
            var items = await GraphClient.Me.Drive.Items[item.ParentReference.Id].Children.Request().GetAsync();
            if (items.Count()>0)
            {
                driveItems = items;
                isBack = true;
            }

            if (item.ParentReference.Id== "01LOLRCNV6Y2GOVW7725BZO354PWSELRRZ")
            {
                isBack = false;
            }

            newFolderName = "";
            selectDownloadUrl = "";
        }
    }

    private async Task CreateFolder(string parentId)
    {
        if (!string.IsNullOrEmpty(newFolderName))
        {
            var newFolder = new DriveItem
            {
                Name = newFolderName,
                Folder = new Folder
                {
                },
                AdditionalData = new Dictionary<string, object>()
                {
                    {"@microsoft.graph.conflictBehavior", "rename"}
                }
            };

            var driveItem = await GraphClient.Me.Drive.Items[parentId].Children.Request()
               .AddAsync(newFolder);

            var items = await GraphClient.Me.Drive.Items[parentId].Children.Request().GetAsync();
            if (items.Count() > 0)
            {
                driveItems = items;
                isBack = true;
            }

            if (parentId == "01LOLRCNV6Y2GOVW7725BZO354PWSELRRZ")
            {
                isBack = false;
            }

            newFolderName = "";
        }
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var maxAllowedFiles = 1;
        long maxFileSize = 1024 * 1024 * 4;

        if (!string.IsNullOrEmpty(parentId))
        {
            foreach (var imageFile in e.GetMultipleFiles(maxAllowedFiles))
            {
                var fileStream = imageFile.OpenReadStream(maxFileSize);


                //using var stream = new System.IO.MemoryStream(System.Text.Encoding.UTF8.GetBytes(@"The contents of the file goes here."));

                await GraphClient.Me.Drive.Items[parentId].ItemWithPath("/" + imageFile.Name).Content
                    .Request()
                    .PutAsync<DriveItem>(fileStream);



                //var uploadSession = await GraphClient.Me.Drive.Items[parentId].ItemWithPath("/" + imageFile.Name).CreateUploadSession().Request().PostAsync();

                //// Max slice size must be a multiple of 320 KiB
                //int maxSliceSize = 320 * 1024;
                //var fileUploadTask =
                //    new LargeFileUploadTask<DriveItem>(uploadSession, fileStream, maxSliceSize);

                //// Create a callback that is invoked after each slice is uploaded
                //IProgress<long> progress = new Progress<long>(prog =>
                //{
                //    uploadProcess = $"Uploaded {prog} bytes of {fileStream.Length} bytes";
                //});

                //try
                //{
                //    // Upload the file
                //    var uploadResult = await fileUploadTask.UploadAsync(progress);

                //    if (uploadResult.UploadSucceeded)
                //    {
                //        // The ItemResponse object in the result represents the
                //        // created item.
                //        uploadProcess = $"Upload complete, item ID: {uploadResult.ItemResponse.Id}";
                //    }
                //    else
                //    {
                //        uploadProcess = "Upload failed";
                //    }
                //}
                //catch (ServiceException ex)
                //{
                //    uploadProcess = $"Error uploading: {ex.ToString()}";
                //}

            }

            var items = await GraphClient.Me.Drive.Items[parentId].Children.Request().GetAsync();
            if (items.Count() > 0)
            {
                driveItems = items;
                isBack = true;
            }

            if (parentId == "01LOLRCNV6Y2GOVW7725BZO354PWSELRRZ")
            {
                isBack = false;
            }
        }
    }
}