@page "/upload"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Graph
@inject HttpClient http
@inject NavigationManager manager
@*@attribute [Authorize]*@
@inject GraphServiceClient GraphClient

<h3>上传本地图片</h3>

@if (user != null)
{
    <p>
        <InputFile OnChange="@OnInputFileChange" multiple />
    </p>
}


@if (imageDataUrls.Count > 0)
{
    <h4>Images</h4>

    <div class="card" style="width:30rem;">
        <div class="card-body">
            @foreach (var imageDataUrl in imageDataUrls)
            {
                <p>User:@user.UserPrincipalName</p>
                <p>Name:@imageName</p>
                <img class="rounded m-1" src="@imageDataUrl" />
                <button class="btn btn-primary" @onclick="UploadImg">Upload Img</button>
                <button class="btn btn-primary" @onclick="DescribeImg">Describe Img</button>
            }
        </div>
    </div>
}

<p>UpYun可用空间：@upYunBucketUsage<button class="btn btn-primary" @onclick="GetUpYunBucket">查询</button></p>

@code {

    private string imageName;

    private long upYunBucketUsage = 0;

    private IList<string> imageDataUrls = new List<string>();

    private string bucketDomain = "https://pan.axiangblog.com";

    private User user;

    protected async override Task OnInitializedAsync()
    {
        var request = GraphClient.Me.Request();
        user = await request.GetAsync();
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var maxAllowedFiles = 1;
        long maxFileSize = 1024 * 1024 * 15;

        foreach (var imageFile in e.GetMultipleFiles(maxAllowedFiles))
        {
            var format = imageFile.ContentType;
            var resizedImageFile = await imageFile.RequestImageFileAsync(format,
        600, 400);
            var buffer = new byte[resizedImageFile.Size];
            await resizedImageFile.OpenReadStream(maxFileSize).ReadAsync(buffer);
            var imageDataUrl =
                $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            imageName = imageFile.Name;
            imageDataUrls.Add(imageDataUrl);
        }
    }

    private async Task UploadImg()
    {
        var a = imageDataUrls[0];
        var uploadResult = await http.PostAsJsonAsync<string>("api/uploadImg", a);

        var res = await uploadResult.Content.ReadAsStringAsync();

        if (!string.IsNullOrEmpty(res) && res.StartsWith("/"))
        {
            imageDataUrls[0] = bucketDomain+res;
            var currentDateTime=TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TZConvert.GetTimeZoneInfo("Asia/Shanghai"));

            await http.PostAsJsonAsync<ImgDocument>("api/addImg", new ImgDocument(){
                id= currentDateTime.ToString("yyyyMMddHHmmss"),
                ImgId = currentDateTime.ToString("yyyyMMddHHmmss"),
                Name=imageName,
                UpyunPath=res,
                Url=bucketDomain+res,
                UserId=user.Id,
                Creator=user.UserPrincipalName
            });
        }
    }

    private async Task DescribeImg()
    {
        var uploadImgUrl = imageDataUrls[0];
        var uploadResult = await http.PostAsJsonAsync<ComputerVisionImg>("api/describeimg", new ComputerVisionImg()
        {
            url = (manager.BaseUri + uploadImgUrl)
        }); 

        var res = await uploadResult.Content.ReadAsStringAsync();
    }

    private async Task GetUpYunBucket()
    {
        upYunBucketUsage = await http.GetFromJsonAsync<long>("api/upYunUsage");
    }

    public class ImgDocument
    {
        public string id { get; set; }
        public string rev { get; set; }
        public string ImgId { get; set; }
        public string Name { get; set; }
        public string UpyunPath { get; set; }
        public string Url { get; set; }
        public string UserId { get; set; }
        public string Creator { get; set; }
    }

    public class ComputerVisionImg
    {
        public string url { get; set; } 
    }
}